/*

LÓGICA PROGRAMAÇÃO - aplicar todos esses fundamentos para resolver um problema

-> dados: 18 - input -> entrada de dados

-> informação - output -> representação do mínimo para maior idade - idade de alguém - pessoa avoada

-> estruturas condicionais - desvio de fluxos

*/

// DADOS - tipos - 1a etapa dentro do processo de desenvolvimento do algoritmo

// 18 - número - idade, altura, peso, valor - inteiro ou real

// 'a' ou 'abc' - string - conjunto de caracteres - '!@#%¨&98()787776' -> string 
// nome, cidade, e-mail, cpf, dados

// verdadeiro ou falso - booleano 
// ativo, maior, promoção


// DECLARAÇÃO DE VARIÁVEIS - entrada

// var -> declaração global -> esta caindo em desuso

// let -> declaração local - tenho acesso somente onde declaração/criada { contexto }

// const -> declaração local - porém não pode ser mofificada/reatribuida

/* 
deixa idade;

deixe idade = 18;
let nome = 'João';



altura constante = 73,5;
altura = 87,0; // ISSO DÁ ERRO - cuidado!

deixe ativo = verdadeiro;
ativo = falso; // ISSO DÁ BOM - vai em frente!

*/






// OPERADORES 

// ARITMÉTICOS -> +, -, *, /, %, ** -> (valor1 OPERADOR valor2)
/* deixe num1 = 10;
deixe num2 = 20;
*/
// num1 + num2 = 30;
// num1 - num2 = 10;
// num1 * num2 = 200;
// num1 / num2 = 2;
// num1 % num2 = 10;
// num1 ** 2 = 100;


// DE ATRIBUIÇÃO -> =, +=, -=, *=, /=, %=, **=

// deixe num3 = 5;

// num3 += 2
// num3 = num3 + 2 é igual ao de cima
// 7

// num3 -= 2
// num3 = num3 - 2 é igual ao de cima
// 3

// num3 *=2
// num3 = num3 * 2
// 10

// num3 /=2
// num3 = num3 / 2
// 2.500000


// num3 %=2
// num3 = num3 % 2
// 1


// DE COMPARAÇÃO -> > (maior que), < (menor que), >= (maior OU igual), <= (menor OU igual), == (igual), != (diferente), === ( ficaram iguais), !== (estritamente diferentes)

valor1 COMPARAÇÃO valor2 ? --> retorna um resultado lógico -> TRUE ou FALSE

//deixe num1 = '5';
//deixe num2 = 5;

// num1 == num2 (?) true - ignora o tipo e considera apenas o valor
// num1 != num2 (?) false - ignora o tipo e considera apenas o valor

// num1 === num2 (?) false - identico - precisa ser igual em tipo e em valor
// num1 !== num2 (?) true - não são identicos - igual em valor mas não em tipo

deixe num1 = 5;
deixe num2 = 10;

// num1 > num2 -> false -------- sempre o da esquerda tolerado à comparação com o da direita
// num1 < num2 -> falso

// num1 >= num2 -> maior(F) OU igual(V) => false
// num1 <= num2 -> menor(V) OU igual(F) => true


// LÓGICOS

// OU -> ||

// E -> &&

// NAO -> !